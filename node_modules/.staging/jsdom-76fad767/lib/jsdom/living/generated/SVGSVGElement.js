"use strict";

const conversions = require("webidl-conversions");
const utils = require("./utils.js");

const impl = utils.implSymbol;
const SVGGraphicsElement = require("./SVGGraphicsElement.js");
const WindowEventHandlers = require("./WindowEventHandlers.js");

function SVGSVGElement() {
  throw new TypeError("Illegal constructor");
}

Object.setPrototypeOf(SVGSVGElement.prototype, SVGGraphicsElement.interface.prototype);
Object.setPrototypeOf(SVGSVGElement, SVGGraphicsElement.interface);

Object.defineProperty(SVGSVGElement, "prototype", {
  value: SVGSVGElement.prototype,
  writable: false,
  enumerable: false,
  configurable: false
});

SVGSVGElement.prototype.createSVGNumber = function createSVGNumber() {
  if (!this || !module.exports.is(this)) {
    throw new TypeError("Illegal invocation");
  }

  return utils.tryWrapperForImpl(this[impl].createSVGNumber());
};

SVGSVGElement.prototype.getElementById = function getElementById(elementId) {
  if (!this || !module.exports.is(this)) {
    throw new TypeError("Illegal invocation");
  }

  if (arguments.length < 1) {
    throw new TypeError(
      "Failed to execute 'getElementById' on 'SVGSVGElement': 1 argument required, but only " +
        arguments.length +
        " present."
    );
  }
  const args = [];
  {
    let curArg = arguments[0];
    curArg = conversions["DOMString"](curArg, {
      context: "Failed to execute 'getElementById' on 'SVGSVGElement': parameter 1"
    });
    args.push(curArg);
  }
  return utils.tryWrapperForImpl(this[impl].getElementById(...args));
};

SVGSVGElement.prototype.suspendRedraw = function suspendRedraw(maxWaitMilliseconds) {
  if (!this || !module.exports.is(this)) {
    throw new TypeError("Illegal invocation");
  }

  if (arguments.length < 1) {
    throw new TypeError(
      "Failed to execute 'suspendRedraw' on 'SVGSVGElement': 1 argument required, but only " +
        arguments.length +
        " present."
    );
  }
  const args = [];
  {
    let curArg = arguments[0];
    curArg = conversions["unsigned long"](curArg, {
      context: "Failed to execute 'suspendRedraw' on 'SVGSVGElement': parameter 1"
    });
    args.push(curArg);
  }
  return this[impl].suspendRedraw(...args);
};

SVGSVGElement.prototype.unsuspendRedraw = function unsuspendRedraw(suspendHandleID) {
  if (!this || !module.exports.is(this)) {
    throw new TypeError("Illegal invocation");
  }

  if (arguments.length < 1) {
    throw new TypeError(
      "Failed to execute 'unsuspendRedraw' on 'SVGSVGElement': 1 argument required, but only " +
        arguments.length +
        " present."
    );
  }
  const args = [];
  {
    let curArg = arguments[0];
    curArg = conversions["unsigned long"](curArg, {
      context: "Failed to execute 'unsuspendRedraw' on 'SVGSVGElement': parameter 1"
    });
    args.push(curArg);
  }
  return this[impl].unsuspendRedraw(...args);
};

SVGSVGElement.prototype.unsuspendRedrawAll = function unsuspendRedrawAll() {
  if (!this || !module.exports.is(this)) {
    throw new TypeError("Illegal invocation");
  }

  return this[impl].unsuspendRedrawAll();
};

SVGSVGElement.prototype.forceRedraw = function forceRedraw() {
  if (!this || !module.exports.is(this)) {
    throw new TypeError("Illegal invocation");
  }

  return this[impl].forceRedraw();
};

O